from datetime import datetime
import random
import requests
import webbrowser
from urllib.parse import quote
from typing import Any, Text, Dict, List
from rasa_sdk import Action, Tracker
from rasa_sdk.executor import CollectingDispatcher
from rasa_sdk.events import SlotSet


class WeatherHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≥–æ–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    API_URL = "https://api.openweathermap.org/data/2.5/weather"

    def __init__(self, api_key: str):
        self.api_key = api_key

    def fetch_weather(self, location: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–≥–æ–¥–µ"""
        try:
            response = requests.get(
                self.API_URL,
                params={
                    'q': location,
                    'appid': self.api_key,
                    'units': 'metric',
                    'lang': 'ru'
                },
                timeout=8
            )
            response.raise_for_status()
            return response.json()
        except requests.RequestException:
            return None


class WeatherAction(Action):
    def __init__(self):
        self.weather_service = WeatherHandler("a83e1039a7cd83d057821e4fe86591e6")

    def name(self) -> Text:
        return "weather_query_action"

    def compose_response(self, data: Dict, city: str) -> str:
        """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å –ø–æ–≥–æ–¥–æ–π"""
        conditions = data['weather'][0]['description']
        temp = data['main']['temp']
        details = {
            '–≤–ª–∞–∂–Ω–æ—Å—Ç—å': f"{data['main']['humidity']}%",
            '–¥–∞–≤–ª–µ–Ω–∏–µ': f"{data['main']['pressure']} –≥–ü–∞",
            '–≤–µ—Ç–µ—Ä': f"{data['wind']['speed']} –º/—Å"
        }

        templates = [
            f"–í {city} —Å–µ–π—á–∞—Å {conditions}, —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp}¬∞C. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: {', '.join(f'{k}: {v}' for k, v in details.items())}",
            f"–ü–æ–≥–æ–¥–∞ –≤ {city}: {conditions}, {temp}¬∞C. –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {', '.join(f'{k} {v}' for k, v in details.items())}",
            f"–°–µ–π—á–∞—Å –≤ {city}: {conditions}, {temp} –≥—Ä–∞–¥—É—Å–æ–≤. {', '.join(f'{k} - {v}' for k, v in details.items())}"
        ]

        return random.choice(templates)

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        location = tracker.get_slot("location")
        if not location:
            dispatcher.utter_message("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–≥–æ–¥—ã")
            return []

        weather_data = self.weather_service.fetch_weather(location)

        if not weather_data or weather_data.get('cod') != 200:
            dispatcher.utter_message("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.")
            return []

        response = self.compose_response(weather_data, location)
        dispatcher.utter_message(response)

        return [SlotSet("location", None)]


class TimeDateAction(Action):
    def name(self) -> Text:
        return "time_info_action"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        current = datetime.now()
        time_format = "%H:%M"
        date_format = "%d %B %Y"

        responses = [
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current.strftime(time_format)}, –¥–∞—Ç–∞: {current.strftime(date_format)}",
            f"–°–µ–π—á–∞—Å {current.strftime(time_format)}, —Å–µ–≥–æ–¥–Ω—è {current.strftime(date_format)}",
            f"–í—Ä–µ–º—è: {current.strftime(time_format)}, {current.strftime(date_format)}"
        ]

        dispatcher.utter_message(random.choice(responses))
        return []


class WebSearchAction(Action):
    def name(self) -> Text:
        return "web_search_action"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        search_term = tracker.get_slot("search_term")
        if not search_term:
            dispatcher.utter_message("–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏")
            return []

        search_url = f"https://yandex.ru/search/?text={quote(search_term)}"
        webbrowser.open(search_url)

        confirmations = [
            f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –≤—ã–ø–æ–ª–Ω–µ–Ω",
            f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '{search_term}'",
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'"
        ]

        dispatcher.utter_message(random.choice(confirmations))
        return []


class EmotionAnalysisAction(Action):
    EMOTION_WORDS = {
        'positive': ['—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '–≤–æ—Å—Ç–æ—Ä–≥', '—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ', '–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ'],
        'negative': ['–≥—Ä—É—Å—Ç—å', '–ø–µ—á–∞–ª—å', '–∑–ª–æ—Å—Ç—å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '—Ç–æ—Å–∫–∞']
    }

    def name(self) -> Text:
        return "emotion_analysis_action"

    def analyze_text(self, text: str) -> str:
        text_lower = text.lower()
        positive = sum(word in text_lower for word in self.EMOTION_WORDS['positive'])
        negative = sum(word in text_lower for word in self.EMOTION_WORDS['negative'])

        if positive > negative:
            return 'positive'
        elif negative > positive:
            return 'negative'
        return 'neutral'

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        user_text = tracker.latest_message.get('text', '')
        mood = self.analyze_text(user_text)

        responses = {
            'positive': [
                "–í—ã –∏–∑–ª—É—á–∞–µ—Ç–µ –ø–æ–∑–∏—Ç–∏–≤! üòä",
                "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "–í–∞—à–∞ —Ä–∞–¥–æ—Å—Ç—å –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞! üòÑ"
            ],
            'negative': [
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞... üòî",
                "–Ø –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º.",
                "–¢—è–∂–µ–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç, –¥–µ—Ä–∂–∏—Ç–µ—Å—å! ü§ó"
            ],
            'neutral': [
                "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω. –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?",
                "–°–ø–æ–∫–æ–π–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "–í—Å–µ —Ä–æ–≤–Ω–æ. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?"
            ]
        }

        dispatcher.utter_message(random.choice(responses[mood]))
        return []


class MathCalculationAction(Action):
    def name(self) -> Text:
        return "math_calculation_action"

    def safe_calculate(self, expression: str) -> float:

        allowed_chars = set('0123456789+-*/.() ')
        if not all(c in allowed_chars for c in expression):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")

        try:
            return eval(expression, {'__builtins__': None}, {})
        except:
            raise ValueError("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        math_expr = tracker.get_slot("math_expression")
        if not math_expr:
            dispatcher.utter_message("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
            return []

        try:
            result = self.safe_calculate(math_expr)
            dispatcher.utter_message(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result:.2f}")
        except ValueError as e:
            dispatcher.utter_message(str(e))

        return [SlotSet("math_expression", None)]