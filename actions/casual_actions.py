import webbrowser
from argparse import Action
from datetime import datetime
from pipes import quote
from random import random
from tkinter import Text
from typing import Dict, Any, List

from rasa_sdk import Tracker, logger
from rasa_sdk.events import SlotSet
from rasa_sdk.executor import CollectingDispatcher




def name() -> str:
    return "action_get_time"


class TimeDateAction(Action):
    def name(self) -> Text:
        return "time_info_action"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        current = datetime.now()
        time_format = "%H:%M"
        date_format = "%d %B %Y"

        responses = [
            f"–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current.strftime(time_format)}, –¥–∞—Ç–∞: {current.strftime(date_format)}",
            f"–°–µ–π—á–∞—Å {current.strftime(time_format)}, —Å–µ–≥–æ–¥–Ω—è {current.strftime(date_format)}",
            f"–í—Ä–µ–º—è: {current.strftime(time_format)}, {current.strftime(date_format)}"
        ]

        dispatcher.utter_message(random.choice(responses))
        return []


class WebSearchAction(Action):
    def name(self) -> Text:
        return "web_search_action"

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        search_term = tracker.get_slot("search_term")
        if not search_term:
            dispatcher.utter_message("–£–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏")
            return []

        search_url = f"https://yandex.ru/search/?text={quote(search_term)}"
        webbrowser.open(search_url)

        confirmations = [
            f"–ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}' –≤—ã–ø–æ–ª–Ω–µ–Ω",
            f"–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ '{search_term}'",
            f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∑–∞–ø—Ä–æ—Å—É '{search_term}'"
        ]

        dispatcher.utter_message(random.choice(confirmations))
        return []


class EmotionAnalysisAction(Action):
    EMOTION_WORDS = {
        'positive': ['—Ä–∞–¥–æ—Å—Ç—å', '—Å—á–∞—Å—Ç—å–µ', '–≤–æ—Å—Ç–æ—Ä–≥', '—É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ', '–≤–æ—Å—Ö–∏—â–µ–Ω–∏–µ'],
        'negative': ['–≥—Ä—É—Å—Ç—å', '–ø–µ—á–∞–ª—å', '–∑–ª–æ—Å—Ç—å', '—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ', '—Ç–æ—Å–∫–∞']
    }

    def name(self) -> Text:
        return "emotion_analysis_action"

    def analyze_text(self, text: str) -> str:
        text_lower = text.lower()
        positive = sum(word in text_lower for word in self.EMOTION_WORDS['positive'])
        negative = sum(word in text_lower for word in self.EMOTION_WORDS['negative'])

        if positive > negative:
            return 'positive'
        elif negative > positive:
            return 'negative'
        return 'neutral'

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        user_text = tracker.latest_message.get('text', '')
        mood = self.analyze_text(user_text)

        responses = {
            'positive': [
                "–í—ã –∏–∑–ª—É—á–∞–µ—Ç–µ –ø–æ–∑–∏—Ç–∏–≤! üòä",
                "–û—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ! –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
                "–í–∞—à–∞ —Ä–∞–¥–æ—Å—Ç—å –∑–∞—Ä–∞–∑–∏—Ç–µ–ª—å–Ω–∞! üòÑ"
            ],
            'negative': [
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞... üòî",
                "–Ø –∑–¥–µ—Å—å, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º.",
                "–¢—è–∂–µ–ª—ã–µ –≤—Ä–µ–º–µ–Ω–∞ –ø—Ä–æ—Ö–æ–¥—è—Ç, –¥–µ—Ä–∂–∏—Ç–µ—Å—å! ü§ó"
            ],
            'neutral': [
                "–ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç–æ–Ω. –•–æ—Ç–∏—Ç–µ –æ–±—Å—É–¥–∏—Ç—å —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ?",
                "–°–ø–æ–∫–æ–π–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
                "–í—Å–µ —Ä–æ–≤–Ω–æ. –ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã?"
            ]
        }

        dispatcher.utter_message(random.choice(responses[mood]))
        return []


class MathCalculationAction(Action):
    def name(self) -> Text:
        return "math_calculation_action"

    def safe_calculate(self, expression: str) -> float:

        allowed_chars = set('0123456789+-*/.() ')
        if not all(c in allowed_chars for c in expression):
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ –≤—ã—Ä–∞–∂–µ–Ω–∏–∏")

        try:
            return eval(expression, {'__builtins__': None}, {})
        except:
            raise ValueError("–û—à–∏–±–∫–∞ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è")

    def run(self, dispatcher: CollectingDispatcher, tracker: Tracker, domain: Dict[Text, Any]) -> List[Dict]:
        math_expr = tracker.get_slot("math_expression")
        if not math_expr:
            dispatcher.utter_message("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ")
            return []

        try:
            result = self.safe_calculate(math_expr)
            dispatcher.utter_message(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result:.2f}")
        except ValueError as e:
            dispatcher.utter_message(str(e))

        return [SlotSet("math_expression", None)]

class ActionCalculate(Action):
    def name(self) -> str:
        return "action_calculate"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> list[Any] | list[dict[str, Any]]:

        expression = tracker.get_slot("expression")
        if not expression:
            dispatcher.utter_message(text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è.")
            return []

        try:
            expression = expression.replace('x', '*')
            result = eval(expression)
            dispatcher.utter_message(text=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        except (SyntaxError, TypeError, NameError, ZeroDivisionError):
            dispatcher.utter_message(text="–ù–µ –º–æ–≥—É –≤—ã—á–∏—Å–ª–∏—Ç—å —ç—Ç–æ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ.")

        return [SlotSet("expression", None)]


class ActionAnalyzeMood(Action):
    def name(self) -> str:
        return "action_analyze_mood"

    def run(self, dispatcher: CollectingDispatcher,
            tracker: Tracker,
            domain: Dict[Text, Any]) -> List[Dict[Text, Any]]:

        user_message = tracker.latest_message.get("text", "").lower()

        positive_words = ["—Ö–æ—Ä–æ—à–æ", "–æ—Ç–ª–∏—á–Ω–æ", "–ø—Ä–µ–∫—Ä–∞—Å–Ω–æ", "—Ä–∞–¥–æ—Å—Ç—å", "—Å—á–∞—Å—Ç–ª–∏–≤", "—É—Ä–∞", "–ª—é–±–ª—é", "–∫–ª–∞—Å—Å–Ω–æ",
                          "–∑–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ"]
        negative_words = ["–ø–ª–æ—Ö–æ", "—É–∂–∞—Å–Ω–æ", "–≥—Ä—É—Å—Ç–Ω–æ", "–Ω–µ—Å—á–∞—Å—Ç—å–µ", "—Ç–æ—Å–∫–ª–∏–≤–æ", "—Ä–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω", "—É—Å—Ç–∞–ª", "–±–µ—Å–∏—Ç"]

        positive_count = sum(word in user_message for word in positive_words)
        negative_count = sum(word in user_message for word in negative_words)

        if positive_count > negative_count:
            mood = "positive"
        elif negative_count > positive_count:
            mood = "negative"
        else:
            mood = "neutral"

        responses = {
            "positive": [
                "–¢—ã –∑–≤—É—á–∏—à—å –æ—á–µ–Ω—å –ø–æ–∑–∏—Ç–∏–≤–Ω–æ! üòÑ –ß–µ–º –º–æ–≥—É –ø–æ—Ä–∞–¥–æ–≤–∞—Ç—å —Ç–µ–±—è –µ—â—ë?",
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!",
                "–Ø —á—É–≤—Å—Ç–≤—É—é –≤–∞—à—É —Ä–∞–¥–æ—Å—Ç—å! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
            ],
            "negative": [
                "–¢—ã, –ø–æ—Ö–æ–∂–µ, –Ω–µ –≤ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–∏... üòî –•–æ—á–µ—à—å –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ–± —ç—Ç–æ–º?",
                "–ö–∞–∂–µ—Ç—Å—è, –≤–∞–º —Å–µ–π—á–∞—Å –Ω–µ–ª–µ–≥–∫–æ...",
                "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è –ø–æ–¥–∞–≤–ª–µ–Ω–Ω—ã–º. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å - —è –∑–¥–µ—Å—å."
            ],
            "neutral": [
                "–£–ª–∞–≤–ª–∏–≤–∞—é –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –Ω–∞—Å—Ç—Ä–æ–π. –°–ø—Ä–∞—à–∏–≤–∞–π, –µ—Å–ª–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–æ!",
                "–í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∫–∞–∂–µ—Ç—Å—è —Ä–æ–≤–Ω—ã–º. –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ?",
                "–ü–æ—Ö–æ–∂–µ, —É –≤–∞—Å –æ–±—ã—á–Ω—ã–π –¥–µ–Ω—å. –ù–∞–¥–µ—é—Å—å, –æ–Ω —Å—Ç–∞–Ω–µ—Ç –µ—â–µ –ª—É—á—à–µ!"
            ]
        }

        dispatcher.utter_message(text=random.choice(responses[mood]))
        return []
